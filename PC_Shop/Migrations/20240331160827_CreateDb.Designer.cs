// <auto-generated />
using System;
using PC_Shop.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PC_Shop.Migrations
{
    [DbContext(typeof(ComputerDbContext))]
    [Migration("20240331160827_CreateDb")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ComponentComputer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("HardDriveId")
                        .HasColumnType("int");

                    b.Property<int?>("MotherBoardId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int?>("ProcessorId")
                        .HasColumnType("int");

                    b.Property<int?>("RamId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitId")
                        .HasColumnType("int");

                    b.Property<int?>("VideoCardId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HardDriveId");

                    b.HasIndex("MotherBoardId");

                    b.HasIndex("ProcessorId");

                    b.HasIndex("RamId");

                    b.HasIndex("UnitId");

                    b.HasIndex("VideoCardId");

                    b.ToTable("ComponentComputers");
                });

            modelBuilder.Entity("Computer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComponentComputerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ComponentComputerId");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("HardDrive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("HardDriveType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ReadWriteSpeed")
                        .HasColumnType("int");

                    b.Property<int>("StorageSize")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HardDrives");
                });

            modelBuilder.Entity("MotherBoard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chipset")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<string>("Socket")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MotherBoards");
                });

            modelBuilder.Entity("Processor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClockFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumCores")
                        .HasColumnType("int");

                    b.Property<int>("NumThreads")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ProcessorGeneration")
                        .HasColumnType("int");

                    b.Property<string>("ProcessorManufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessorModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProcessorSeries")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocketType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Processors");
                });

            modelBuilder.Entity("Ram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OperatingFrequency")
                        .HasColumnType("int");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("TypeMemory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rams");
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FormFactorMotherBoard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("VideoCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClockFrequency")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("SeriesName")
                        .HasColumnType("int");

                    b.Property<int>("VideoMemory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("VideoCards");
                });

            modelBuilder.Entity("ComponentComputer", b =>
                {
                    b.HasOne("HardDrive", "HardDrive")
                        .WithMany("ComponentComputers")
                        .HasForeignKey("HardDriveId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MotherBoard", "MotherBoard")
                        .WithMany("ComponentComputers")
                        .HasForeignKey("MotherBoardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Processor", "Processor")
                        .WithMany("ComponentComputers")
                        .HasForeignKey("ProcessorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Ram", "Ram")
                        .WithMany("ComponentComputers")
                        .HasForeignKey("RamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Unit", "Unit")
                        .WithMany("ComponentComputers")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("VideoCard", "VideoCard")
                        .WithMany("ComponentComputers")
                        .HasForeignKey("VideoCardId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("HardDrive");

                    b.Navigation("MotherBoard");

                    b.Navigation("Processor");

                    b.Navigation("Ram");

                    b.Navigation("Unit");

                    b.Navigation("VideoCard");
                });

            modelBuilder.Entity("Computer", b =>
                {
                    b.HasOne("ComponentComputer", "ComponentComputer")
                        .WithMany("Computers")
                        .HasForeignKey("ComponentComputerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ComponentComputer");
                });

            modelBuilder.Entity("ComponentComputer", b =>
                {
                    b.Navigation("Computers");
                });

            modelBuilder.Entity("HardDrive", b =>
                {
                    b.Navigation("ComponentComputers");
                });

            modelBuilder.Entity("MotherBoard", b =>
                {
                    b.Navigation("ComponentComputers");
                });

            modelBuilder.Entity("Processor", b =>
                {
                    b.Navigation("ComponentComputers");
                });

            modelBuilder.Entity("Ram", b =>
                {
                    b.Navigation("ComponentComputers");
                });

            modelBuilder.Entity("Unit", b =>
                {
                    b.Navigation("ComponentComputers");
                });

            modelBuilder.Entity("VideoCard", b =>
                {
                    b.Navigation("ComponentComputers");
                });
#pragma warning restore 612, 618
        }
    }
}
